/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kripto2021.hokkinon;

import com.kripto2021.hokkinon.affine.*;
import com.kripto2021.hokkinon.enigma.*;
import com.kripto2021.hokkinon.playfair.*;
import com.kripto2021.hokkinon.viginere.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import utils.Utils;

/**
 *
 * @author PERSONAL
 */
public class App extends javax.swing.JFrame {
    private File inputFile;
    private ComboBoxItem chosenAlgorithm;
    
    private Playfair playfair = new Playfair("");
    private Affine affine = new Affine(-1, -1);
    private boolean isEncrypting = true;
    
    private javax.swing.JTextField[][] playfairKey;
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();

        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Affine"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Playfair"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Viginere Full"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Extended Viginere"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Enigma"));
        
        this.playfairKey = new javax.swing.JTextField[5][5];
        this.playfairKey[0][0] = this.playfair0_0;
        this.playfairKey[0][1] = this.playfair0_1;
        this.playfairKey[0][2] = this.playfair0_2;
        this.playfairKey[0][3] = this.playfair0_3;
        this.playfairKey[0][4] = this.playfair0_4;
        this.playfairKey[1][0] = this.playfair1_0;
        this.playfairKey[1][1] = this.playfair1_1;
        this.playfairKey[1][2] = this.playfair1_2;
        this.playfairKey[1][3] = this.playfair1_3;
        this.playfairKey[1][4] = this.playfair1_4;
        this.playfairKey[2][0] = this.playfair2_0;
        this.playfairKey[2][1] = this.playfair2_1;
        this.playfairKey[2][2] = this.playfair2_2;
        this.playfairKey[2][3] = this.playfair2_3;
        this.playfairKey[2][4] = this.playfair2_4;
        this.playfairKey[3][0] = this.playfair3_0;
        this.playfairKey[3][1] = this.playfair3_1;
        this.playfairKey[3][2] = this.playfair3_2;
        this.playfairKey[3][3] = this.playfair3_3;
        this.playfairKey[3][4] = this.playfair3_4;
        this.playfairKey[4][0] = this.playfair4_0;
        this.playfairKey[4][1] = this.playfair4_1;
        this.playfairKey[4][2] = this.playfair4_2;
        this.playfairKey[4][3] = this.playfair4_3;
        this.playfairKey[4][4] = this.playfair4_4;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadFile = new javax.swing.JFileChooser();
        encryptOrDecrypt = new javax.swing.ButtonGroup();
        cipherFormat = new javax.swing.ButtonGroup();
        algorithmChoiceComboBox = new javax.swing.JComboBox<>();
        cipherteksTextAreaContainer = new javax.swing.JScrollPane();
        cipherteksTextArea = new javax.swing.JTextArea();
        plainteksTextAreaContainer = new javax.swing.JScrollPane();
        plainteksTextArea = new javax.swing.JTextArea();
        key = new javax.swing.JTextField();
        plainteksLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        plainteksLabel1 = new javax.swing.JLabel();
        popUp = new javax.swing.JPanel();
        popUpPlayfair = new javax.swing.JPanel();
        playfair0_0 = new javax.swing.JTextField();
        playfair0_1 = new javax.swing.JTextField();
        playfair0_2 = new javax.swing.JTextField();
        playfair0_3 = new javax.swing.JTextField();
        playfair0_4 = new javax.swing.JTextField();
        playfair1_0 = new javax.swing.JTextField();
        playfair1_1 = new javax.swing.JTextField();
        playfair1_2 = new javax.swing.JTextField();
        playfair1_3 = new javax.swing.JTextField();
        playfair1_4 = new javax.swing.JTextField();
        playfair2_0 = new javax.swing.JTextField();
        playfair2_1 = new javax.swing.JTextField();
        playfair2_2 = new javax.swing.JTextField();
        playfair2_3 = new javax.swing.JTextField();
        playfair2_4 = new javax.swing.JTextField();
        playfair3_0 = new javax.swing.JTextField();
        playfair3_1 = new javax.swing.JTextField();
        playfair3_2 = new javax.swing.JTextField();
        playfair3_3 = new javax.swing.JTextField();
        playfair3_4 = new javax.swing.JTextField();
        playfair4_0 = new javax.swing.JTextField();
        playfair4_1 = new javax.swing.JTextField();
        playfair4_2 = new javax.swing.JTextField();
        playfair4_3 = new javax.swing.JTextField();
        playfair4_4 = new javax.swing.JTextField();
        popUpAffine = new javax.swing.JPanel();
        mTextField = new javax.swing.JTextField();
        bTextField = new javax.swing.JTextField();
        mLabel = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        affineDescriptionScrollPane = new javax.swing.JScrollPane();
        affineDescription = new javax.swing.JTextArea();
        uploadPlainteksButton = new javax.swing.JButton();
        saveCipherteksButton = new javax.swing.JButton();
        savePlainteksButton = new javax.swing.JButton();
        uploadCipherteksButton = new javax.swing.JButton();
        decryptRadioButton = new javax.swing.JRadioButton();
        encryptRadioButton = new javax.swing.JRadioButton();
        merged = new javax.swing.JRadioButton();
        seperated = new javax.swing.JRadioButton();

        uploadFile.setName("uploadFile"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hokkinon");
        setName("App"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        algorithmChoiceComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        algorithmChoiceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmChoiceComboBoxActionPerformed(evt);
            }
        });

        cipherteksTextArea.setEditable(false);
        cipherteksTextArea.setColumns(20);
        cipherteksTextArea.setRows(5);
        cipherteksTextAreaContainer.setViewportView(cipherteksTextArea);
        cipherteksTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangeCiphertext(e);

            }
        });

        plainteksTextArea.setColumns(20);
        plainteksTextArea.setRows(5);
        plainteksTextArea.setMargin(new java.awt.Insets(0, 0, 0, 0));
        plainteksTextAreaContainer.setViewportView(plainteksTextArea);
        plainteksTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangePlaintext(e);
            }
        });

        key.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangeKey(e);
            }
        });

        plainteksLabel.setText("plainteks:");

        keyLabel.setText("key:");

        plainteksLabel1.setText("cipherteks:");

        playfair0_0.setEditable(false);
        playfair0_0.setBackground(new java.awt.Color(255, 255, 255));

        playfair0_1.setEditable(false);
        playfair0_1.setBackground(new java.awt.Color(255, 255, 255));

        playfair0_2.setEditable(false);
        playfair0_2.setBackground(new java.awt.Color(255, 255, 255));

        playfair0_3.setEditable(false);
        playfair0_3.setBackground(new java.awt.Color(255, 255, 255));

        playfair0_4.setEditable(false);
        playfair0_4.setBackground(new java.awt.Color(255, 255, 255));

        playfair1_0.setEditable(false);
        playfair1_0.setBackground(new java.awt.Color(255, 255, 255));

        playfair1_1.setEditable(false);
        playfair1_1.setBackground(new java.awt.Color(255, 255, 255));

        playfair1_2.setEditable(false);
        playfair1_2.setBackground(new java.awt.Color(255, 255, 255));

        playfair1_3.setEditable(false);
        playfair1_3.setBackground(new java.awt.Color(255, 255, 255));

        playfair1_4.setEditable(false);
        playfair1_4.setBackground(new java.awt.Color(255, 255, 255));

        playfair2_0.setEditable(false);
        playfair2_0.setBackground(new java.awt.Color(255, 255, 255));

        playfair2_1.setEditable(false);
        playfair2_1.setBackground(new java.awt.Color(255, 255, 255));

        playfair2_2.setEditable(false);
        playfair2_2.setBackground(new java.awt.Color(255, 255, 255));

        playfair2_3.setEditable(false);
        playfair2_3.setBackground(new java.awt.Color(255, 255, 255));

        playfair2_4.setEditable(false);
        playfair2_4.setBackground(new java.awt.Color(255, 255, 255));

        playfair3_0.setEditable(false);
        playfair3_0.setBackground(new java.awt.Color(255, 255, 255));

        playfair3_1.setEditable(false);
        playfair3_1.setBackground(new java.awt.Color(255, 255, 255));

        playfair3_2.setEditable(false);
        playfair3_2.setBackground(new java.awt.Color(255, 255, 255));

        playfair3_3.setEditable(false);
        playfair3_3.setBackground(new java.awt.Color(255, 255, 255));

        playfair3_4.setEditable(false);
        playfair3_4.setBackground(new java.awt.Color(255, 255, 255));

        playfair4_0.setEditable(false);
        playfair4_0.setBackground(new java.awt.Color(255, 255, 255));

        playfair4_1.setEditable(false);
        playfair4_1.setBackground(new java.awt.Color(255, 255, 255));

        playfair4_2.setEditable(false);
        playfair4_2.setBackground(new java.awt.Color(255, 255, 255));

        playfair4_3.setEditable(false);
        playfair4_3.setBackground(new java.awt.Color(255, 255, 255));

        playfair4_4.setEditable(false);
        playfair4_4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout popUpPlayfairLayout = new javax.swing.GroupLayout(popUpPlayfair);
        popUpPlayfair.setLayout(popUpPlayfairLayout);
        popUpPlayfairLayout.setHorizontalGroup(
            popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popUpPlayfairLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playfair4_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair3_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(popUpPlayfairLayout.createSequentialGroup()
                            .addComponent(playfair0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair0_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair0_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(popUpPlayfairLayout.createSequentialGroup()
                            .addComponent(playfair1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(popUpPlayfairLayout.createSequentialGroup()
                            .addComponent(playfair2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(popUpPlayfairLayout.createSequentialGroup()
                            .addComponent(playfair3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playfair3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playfair3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(popUpPlayfairLayout.createSequentialGroup()
                        .addComponent(playfair4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playfair4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playfair4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playfair4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        popUpPlayfairLayout.setVerticalGroup(
            popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popUpPlayfairLayout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playfair0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair0_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair0_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playfair1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playfair2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playfair3_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(popUpPlayfairLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playfair4_0, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playfair4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap()));
        popUp.setEnabled(false);
        popUp.setFocusable(false);
        popUp.setMaximumSize(new java.awt.Dimension(423, 377));
        popUp.setMinimumSize(new java.awt.Dimension(423, 377));
        popUp.setPreferredSize(new java.awt.Dimension(433, 377));

        mTextField.setEditable(false);

        bTextField.setEditable(false);

        mLabel.setBackground(new java.awt.Color(255, 255, 255));
        mLabel.setText("m: ");

        bLabel.setText("b: ");

        affineDescription.setEditable(false);
        affineDescription.setColumns(20);
        affineDescription.setLineWrap(true);
        affineDescription.setRows(5);
        affineDescription.setText("Input the key at \"key: \" section.\n\nWrite it in <m><space><b>, where m is coprime to 26.\n");
        affineDescription.setWrapStyleWord(true);
        affineDescription.setEnabled(false);
        affineDescriptionScrollPane.setViewportView(affineDescription);

        javax.swing.GroupLayout popUpAffineLayout = new javax.swing.GroupLayout(popUpAffine);
        popUpAffine.setLayout(popUpAffineLayout);
        popUpAffineLayout.setHorizontalGroup(
            popUpAffineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popUpAffineLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(popUpAffineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bLabel)
                    .addComponent(mLabel)
                    .addComponent(mTextField)
                    .addComponent(bTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(affineDescriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );
        popUpAffineLayout.setVerticalGroup(
            popUpAffineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popUpAffineLayout.createSequentialGroup()
                .addComponent(affineDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(mLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout popUpLayout = new javax.swing.GroupLayout(popUp);
        popUpLayout.setHorizontalGroup(
                popUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popUpLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(popUpPlayfair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106))
                        .addGroup(popUpLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(popUpAffine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        popUpLayout.setVerticalGroup(
                popUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(popUpLayout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(popUpPlayfair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()
                                .addComponent(popUpAffine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()
                        ));

        //XViginere Popup
        this.popUpXViginere = new javax.swing.JLabel();
        this.popUpXViginere.setBounds(0, 0, 700, 700);
        this.popUpXViginere.setText("Matrix tidak ditampilkan karena terlalu besar");
        this.popUpXViginere.setOpaque(true);
        this.popUp.add(this.popUpXViginere);

        //Viginere Popup
        this.xviginere = new Viginere(256);
        this.popUpViginere = new javax.swing.JPanel();
        this.popUpViginere.setBounds(0, 0, 700, 700);
        this.popUp.add(this.popUpViginere);

        javax.swing.GroupLayout popUpViginereLayout = new javax.swing.GroupLayout(popUpViginere);
        popUpViginere.setLayout(popUpViginereLayout);
        popUpViginereLayout.setHorizontalGroup(
                popUpViginereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        popUpViginereLayout.setVerticalGroup(
                popUpViginereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        this.viginere = new Viginere(26);
        isAutoKey = new JLabel();
        isAutoKey.setBounds(200, 0, 200, 25);
        isAutoKey.setText("You use auto key");
        isAutoKey.setOpaque(true);
        popUpViginere.add(isAutoKey);

        autoKey = new JButton();
        autoKey.setBounds(0, 0, 100, 25);
        autoKey.setText("Auto key");
        autoKey.setEnabled(false);
        autoKey.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                isAutoKey.setText("You use auto key");
                autoKey.setEnabled(false);
                periodicKey.setEnabled(true);
                if(isEncrypting){
                    encrypt();
                }else{
                    decrypt();
                }
            }
        });
        popUpViginere.add(autoKey);

        periodicKey = new JButton();
        periodicKey.setBounds(100, 0, 100, 25);
        periodicKey.setText("Periodic key");
        periodicKey.setEnabled(true);
        periodicKey.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                isAutoKey.setText("You use periodic key");
                autoKey.setEnabled(true);
                periodicKey.setEnabled(false);
                if(isEncrypting){
                    encrypt();
                }else{
                    decrypt();
                }
            }
        });
        popUpViginere.add(periodicKey);

        this.viginereMatrix = new JTextField[26][26];
        for(int i=0; i<26; i++){
            for(int j=0; j<26; j++) {
                int iCopy = i, jCopy = j;
                this.viginereMatrix[i][j] = new JTextField(String.valueOf((char)('A' + (i+j)%26)));
                this.viginereMatrix[i][j].setBounds(25*(j+2), 25*(i+2), 25, 25);
                this.viginereMatrix[i][j].getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        viginere.setMatrix(iCopy, jCopy, viginereMatrix[iCopy][jCopy].getText());
                        validateViginereMatrix();
                    }
                });
                this.popUpViginere.add(this.viginereMatrix[i][j]);
            }
        }

        //Enigma Popup
        this.popUpEnigma = new javax.swing.JPanel();
        this.popUpEnigma.setBounds(0, 0, 700, 700);
        this.popUp.add(this.popUpEnigma);

        javax.swing.GroupLayout popUpEnigmaLayout = new javax.swing.GroupLayout(popUpEnigma);
        popUpEnigma.setLayout(popUpEnigmaLayout);
        popUpEnigmaLayout.setHorizontalGroup(
                popUpEnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        popUpEnigmaLayout.setVerticalGroup(
                popUpEnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );


        enigma = new Enigma(3);
        rotorLabel = new JLabel[3][26];
        rotorPermutation = new JTextField[3][26];
        mirrorLabel = new JLabel[26];
        mirrorPermutation = new JTextField[26];
        blueCable = new JLabel[3][3];
        greenCable = new JLabel[3][3];
        int paddingLeft = 100;
        int paddingTop = 25;

        for(int i=0; i<3; i++){
            for(int j=0; j<26; j++){
                rotorLabel[i][j] = new JLabel();
                rotorLabel[i][j].setBounds(paddingLeft + 150*i, paddingTop + 25*j, 25, 25);
                rotorLabel[i][j].setText(String.valueOf((char)('A'+j)));
                popUpEnigma.add(rotorLabel[i][j]);
                rotorPermutation[i][j] = new JTextField();
                rotorPermutation[i][j].setBounds(paddingLeft + 25 + 150*i, paddingTop + 25*j, 25, 25);
                rotorPermutation[i][j].setText(String.valueOf(enigma.getRotor()[i][j]));
                int iCopy = i, jCopy = j;
                rotorPermutation[i][j].getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        enigma.setValue(iCopy, jCopy, rotorPermutation[iCopy][jCopy].getText());
                        validateEnigma();
                    }
                });
                popUpEnigma.add(rotorPermutation[i][j]);
            }
            for(int j=0; j<3; j++){
                blueCable[i][j] = new JLabel();
                blueCable[i][j].setBounds(0,0,0,0);
                blueCable[i][j].setOpaque(true);
                blueCable[i][j].setBackground(Color.BLUE);
                popUpEnigma.add(blueCable[i][j]);
                greenCable[i][j] = new JLabel();
                greenCable[i][j].setBounds(0,0,0,0);
                greenCable[i][j].setOpaque(true);
                greenCable[i][j].setBackground(Color.GREEN);
                popUpEnigma.add(greenCable[i][j]);
            }
        }
        for(int i=0; i<26; i++){
            mirrorLabel[i] = new JLabel();
            mirrorLabel[i].setBounds(paddingLeft + 450, paddingTop + 25*i, 25, 25);
            mirrorLabel[i].setText(String.valueOf((char)('A'+i)));
            popUpEnigma.add(mirrorLabel[i]);
            mirrorPermutation[i] = new JTextField();
            mirrorPermutation[i].setEditable(false);
            mirrorPermutation[i].setBounds(paddingLeft + 475, paddingTop + 25*i, 25, 25);
            mirrorPermutation[i].setText(String.valueOf(enigma.getMirror()[i]));
            int iCopy = i;
            mirrorPermutation[i].getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    changedUpdate(e);
                }
                @Override
                public void removeUpdate(DocumentEvent e) {
                    changedUpdate(e);
                }
                @Override
                public void changedUpdate(DocumentEvent e) {
                    enigma.setValue(3, iCopy, mirrorPermutation[iCopy].getText());
                    validateEnigma();
                }
            });
            popUpEnigma.add(mirrorPermutation[i]);
        }


        uploadPlainteksButton.setText("Upload");
        uploadPlainteksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPlainteksButtonActionPerformed(evt);
            }
        });

        saveCipherteksButton.setText("Save");
        saveCipherteksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCipherteksButtonActionPerformed(evt);
            }
        });

        savePlainteksButton.setText("Save");
        savePlainteksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePlainteksButtonActionPerformed(evt);
            }
        });

        uploadCipherteksButton.setText("Upload");
        uploadCipherteksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadCipherteksButtonActionPerformed(evt);
            }
        });
        uploadCipherteksButton.setEnabled(false);

        encryptOrDecrypt.add(decryptRadioButton);
        decryptRadioButton.setText("decrypt");
        decryptRadioButton.setToolTipText("Decrypt ciphertext");
        decryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptRadioButtonActionPerformed(evt);
            }
        });

        encryptOrDecrypt.add(encryptRadioButton);
        encryptRadioButton.setSelected(true);
        encryptRadioButton.setText("encrypt");
        encryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptRadioButtonActionPerformed(evt);
            }
        });

        cipherFormat.add(merged);
        merged.setSelected(true);
        merged.setText("merged");
        merged.setToolTipText("Unseperate ciphertext every 5 characters");
        merged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherteksTextArea.setText(Utils.joinString(cipherteksTextArea.getText()));
            }
        });

        cipherFormat.add(seperated);
        seperated.setText("seperated");
        seperated.setToolTipText("Seperate ciphertext every 5 characters");
        seperated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherteksTextArea.setText(Utils.splitString(cipherteksTextArea.getText()));
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(algorithmChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                        .addComponent(encryptRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decryptRadioButton)
                        .addGap(16, 16, 16))
                    .addComponent(popUp, 0, 700, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(keyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cipherteksTextAreaContainer, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(plainteksTextAreaContainer, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(plainteksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(uploadPlainteksButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(savePlainteksButton)
                                .addGap(1, 1, 1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(plainteksLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(merged)
                                    .addComponent(seperated)
                                    .addComponent(uploadCipherteksButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveCipherteksButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(uploadPlainteksButton)
                                .addComponent(savePlainteksButton))
                            .addComponent(plainteksLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plainteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(key, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(saveCipherteksButton)
                                .addComponent(uploadCipherteksButton)
                                .addComponent(seperated)
                                .addComponent(merged)
                            )
                            .addComponent(plainteksLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cipherteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(algorithmChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decryptRadioButton)
                            .addComponent(encryptRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(popUp, 0, 700, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmChoiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmChoiceComboBoxActionPerformed
        ComboBoxItem selected = (ComboBoxItem)this.algorithmChoiceComboBox.getSelectedItem();

        this.chosenAlgorithm = selected;

        this.popUpPlayfair.setVisible(selected.value().equalsIgnoreCase("playfair"));
        this.popUpAffine.setVisible(selected.value().equalsIgnoreCase("affine"));
        this.popUpViginere.setVisible(selected.value().equalsIgnoreCase("viginere full"));
        this.popUpXViginere.setVisible(selected.value().equalsIgnoreCase("extended viginere"));
        this.popUpEnigma.setVisible(selected.value().equalsIgnoreCase("enigma"));
        
        if (this.isEncrypting) {
            merged.setEnabled(!selected.value().equalsIgnoreCase("extended viginere"));
            seperated.setEnabled(!selected.value().equalsIgnoreCase("extended viginere"));
            this.encrypt();
        }
        else this.decrypt();
    }//GEN-LAST:event_algorithmChoiceComboBoxActionPerformed
    
    private final int MAXIMUM_FILE_SIZE = 1048576; /* 1MB */
    private void uploadPlainteksButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
        try {
            this.inputFile = null;
            
            this.uploadFile.showOpenDialog(this);
            this.inputFile = uploadFile.getSelectedFile();
            
            FileInputStream fis = new FileInputStream(this.inputFile);
            
            byte[] buffer = new byte[Math.min((int) this.inputFile.length(), MAXIMUM_FILE_SIZE)];
            
            fis.read(buffer);
            StringBuilder ssss = new StringBuilder();
            
            fis.close();
            
            this.plainFileContent = buffer;
            this.cipherFileContent = xviginere.encrypt(buffer, this.key.getText());
            // plainteksTextArea.setText(str);
        }
        catch (Exception e) {
            System.out.println("exception");            
        }
    }                                                     

    private void uploadCipherteksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPlainteksButtonActionPerformed
        // TODO add your handling code here:
        try {
            this.inputFile = null;

            this.uploadFile.showOpenDialog(this);
            this.inputFile = uploadFile.getSelectedFile();
            
            FileInputStream fis = new FileInputStream(this.inputFile);
            
            byte[] buffer = new byte[Math.min((int) this.inputFile.length(), MAXIMUM_FILE_SIZE)];
            fis.read(buffer);
            fis.close();

            this.cipherFileContent = buffer;
            this.plainFileContent = xviginere.decrypt(buffer, this.key.getText());
            // this.cipherteksTextArea.setText(str);
        }
        catch (Exception e) {
        }
    }//GEN-LAST:event_uploadPlainteksButtonActionPerformed

    private void saveCipherteksButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String filename;
        
        if (this.inputFile == null) filename = "encrypted.txt";
        else filename = "encrypted-" + this.inputFile.getName();

        File outputFile = new File(filename);
        try {
            outputFile.createNewFile();
            
            FileOutputStream fos = new FileOutputStream(outputFile);
            fos.write(cipherFileContent);
            fos.close();
        } catch (FileNotFoundException ex) {
            // do nothing
        } catch (IOException ex) {
            // do nothing
        }
    }
    
    private void savePlainteksButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String filename;
        
        if (this.inputFile == null) filename = "decrypted.txt";
        else filename = "decrypted-" + this.inputFile.getName();

        File outputFile = new File(filename);
        try {
            outputFile.createNewFile();
            
            FileOutputStream fos = new FileOutputStream(outputFile);
            fos.write(plainFileContent);
            fos.close();
        } catch (FileNotFoundException ex) {
            // do nothing
        } catch (IOException ex) {
            // do nothing
        }
    }
    
    private void onChangePlaintext(DocumentEvent e) {
        if (!this.isEncrypting) return;
        
        // isEncrypting
        this.encrypt();
    }

    private void onChangeCiphertext(DocumentEvent e) {
        if (this.isEncrypting) return;
        
        // isDecrypting
        this.decrypt();
    }

    private void onChangeKey(DocumentEvent e) {
        // generate keys
        String playfairkey = Playfair.getKeyFrom(this.key.getText());
        this.playfair.setKey(playfairkey);
        this.setPlayfairKeys();
        
        long[] affineKey = Affine.getKeyFrom(this.key.getText());
        this.affine = new Affine(affineKey[0], affineKey[1]);
        this.setAffineKeys();

        if (this.isEncrypting) {
            this.encrypt();
        } else {
            this.decrypt();
        }
    }

    private void encryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptRadioButtonActionPerformed
        this.isEncrypting = this.encryptRadioButton.isSelected();
        this.plainteksTextArea.setEditable(this.isEncrypting);
        this.cipherteksTextArea.setEditable(!this.isEncrypting);
        uploadPlainteksButton.setEnabled(true);
        uploadCipherteksButton.setEnabled(false);
        merged.setEnabled(!chosenAlgorithm.value().equalsIgnoreCase("Extended viginere"));
        seperated.setEnabled(!chosenAlgorithm.value().equalsIgnoreCase("Extended viginere"));
    }//GEN-LAST:event_encryptRadioButtonActionPerformed

    private void decryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptRadioButtonActionPerformed
        this.isEncrypting = !this.decryptRadioButton.isSelected();
        this.plainteksTextArea.setEditable(this.isEncrypting);
        this.cipherteksTextArea.setEditable(!this.isEncrypting);
        uploadPlainteksButton.setEnabled(false);
        uploadCipherteksButton.setEnabled(true);
        merged.setEnabled(false);
        seperated.setEnabled(false);
    }//GEN-LAST:event_decryptRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }
    
    private void encrypt() {
        String result = "";

        if(validateKey()){
            if(this.chosenAlgorithm.value().equalsIgnoreCase("viginere full") && viginere.isMatrixValid()){
                result = viginere.encrypt(
                        plainteksTextArea.getText(),
                        key.getText(),
                        !(autoKey.isEnabled()));
                if(seperated.isSelected()){
                    result = Utils.splitString(result);
                }
                cipherteksTextArea.setText(result);
            }
            if(this.chosenAlgorithm.value().equalsIgnoreCase("enigma")){
                EnigmaPath path = enigma.encrypt(plainteksTextArea.getText(), key.getText());
                result = path.result;
                if(seperated.isSelected()){
                    result = Utils.splitString(result);
                }
                cipherteksTextArea.setText(result);
                refreshEnigmaPopup(path);
            }
            if(this.chosenAlgorithm.value().equalsIgnoreCase("extended viginere")){
                result = xviginere.encrypt(plainteksTextArea.getText(),
                        key.getText(),
                        false);
                cipherteksTextArea.setText(result);
            }
        } else if (this.chosenAlgorithm.value().equalsIgnoreCase("playfair")) {
            result = this.playfair.encrypt(this.plainteksTextArea.getText());
            if(seperated.isSelected()){
                result = Utils.splitString(result);
            }
            this.cipherteksTextArea.setText(result);
        } else if (this.chosenAlgorithm.value().equalsIgnoreCase("affine")) {
            result = this.affine.encrypt(this.plainteksTextArea.getText());
            if(seperated.isSelected()){
                result = Utils.splitString(result);
            }
            this.cipherteksTextArea.setText(result);
        }
        // this.cipherFileContent = result;
    }
    
    private void decrypt() {
        String result = "";
        if (this.chosenAlgorithm.value().equalsIgnoreCase("playfair")) {
            result = this.playfair.decrypt(this.cipherteksTextArea.getText());
            this.plainteksTextArea.setText(result);
        } else if (this.chosenAlgorithm.value().equalsIgnoreCase("affine")) {
            result = this.affine.decrypt(this.cipherteksTextArea.getText());
            this.plainteksTextArea.setText(result);
        } else if(validateKey()){
            if(this.chosenAlgorithm.value().equalsIgnoreCase("viginere full")){
                result = viginere.decrypt(
                        cipherteksTextArea.getText(),
                        key.getText(),
                        !(autoKey.isEnabled()));
                plainteksTextArea.setText(result);
            }
            if(this.chosenAlgorithm.value().equalsIgnoreCase("enigma")){
                EnigmaPath path = enigma.encrypt(cipherteksTextArea.getText(), key.getText());
                result = path.result;
                plainteksTextArea.setText(result);
                refreshEnigmaPopup(path);
            }
            if(this.chosenAlgorithm.value().equalsIgnoreCase("extended viginere")){
                result = xviginere.decrypt(cipherteksTextArea.getText(), key.getText(), false);
                plainteksTextArea.setText(result);
            }
        }
        // this.plainFileContent = result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea affineDescription;
    private javax.swing.JScrollPane affineDescriptionScrollPane;
    private javax.swing.JComboBox<ComboBoxItem> algorithmChoiceComboBox;
    private javax.swing.JLabel bLabel;
    private javax.swing.JTextField bTextField;
    private javax.swing.JTextArea cipherteksTextArea;
    private javax.swing.JScrollPane cipherteksTextAreaContainer;

    private javax.swing.JRadioButton decryptRadioButton;
    private javax.swing.ButtonGroup encryptOrDecrypt;
    private javax.swing.JRadioButton encryptRadioButton;
    private javax.swing.JRadioButton merged;
    private javax.swing.ButtonGroup cipherFormat;
    private javax.swing.JRadioButton seperated;

    private javax.swing.JTextField key;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JLabel mLabel;
    private javax.swing.JTextField mTextField;
    private javax.swing.JLabel plainteksLabel;
    private javax.swing.JLabel plainteksLabel1;
    private javax.swing.JTextArea plainteksTextArea;
    private javax.swing.JScrollPane plainteksTextAreaContainer;
    private javax.swing.JTextField playfair0_0;
    private javax.swing.JTextField playfair0_1;
    private javax.swing.JTextField playfair0_2;
    private javax.swing.JTextField playfair0_3;
    private javax.swing.JTextField playfair0_4;
    private javax.swing.JTextField playfair1_0;
    private javax.swing.JTextField playfair1_1;
    private javax.swing.JTextField playfair1_2;
    private javax.swing.JTextField playfair1_3;
    private javax.swing.JTextField playfair1_4;
    private javax.swing.JTextField playfair2_0;
    private javax.swing.JTextField playfair2_1;
    private javax.swing.JTextField playfair2_2;
    private javax.swing.JTextField playfair2_3;
    private javax.swing.JTextField playfair2_4;
    private javax.swing.JTextField playfair3_0;
    private javax.swing.JTextField playfair3_1;
    private javax.swing.JTextField playfair3_2;
    private javax.swing.JTextField playfair3_3;
    private javax.swing.JTextField playfair3_4;
    private javax.swing.JTextField playfair4_0;
    private javax.swing.JTextField playfair4_1;
    private javax.swing.JTextField playfair4_2;
    private javax.swing.JTextField playfair4_3;
    private javax.swing.JTextField playfair4_4;
    private javax.swing.JPanel popUp;
    private javax.swing.JPanel popUpPlayfair;
    private javax.swing.JPanel popUpAffine;
    private javax.swing.JPanel popUpViginere;
    private javax.swing.JLabel popUpXViginere;
    private javax.swing.JPanel popUpEnigma;
    private javax.swing.JButton saveCipherteksButton;
    private javax.swing.JButton savePlainteksButton;
    private javax.swing.JButton uploadCipherteksButton;
    private javax.swing.JFileChooser uploadFile;
    private javax.swing.JButton uploadPlainteksButton;
    // End of variables declaration//GEN-END:variables


    private javax.swing.JTextField[][] viginereMatrix;
    private javax.swing.JButton periodicKey;
    private javax.swing.JButton autoKey;
    private javax.swing.JLabel isAutoKey;
    private Viginere viginere;
    private Viginere xviginere;

    private javax.swing.JLabel[][] rotorLabel;
    private javax.swing.JTextField[][] rotorPermutation;
    private javax.swing.JLabel[][] blueCable;
    private javax.swing.JLabel[][] greenCable;
    private javax.swing.JLabel[] mirrorLabel;
    private javax.swing.JTextField[] mirrorPermutation;
    private Enigma enigma;

    private byte[] plainFileContent;
    private byte[] cipherFileContent;

    
    private void setPlayfairKeys() {
        if (this.playfair.getKey().equals("")) return;
        
        for(int i = 0; i < 5; i++) {
            for(int j = 0; j < 5; j++) {
                this.playfairKey[i][j].setText(String.valueOf(this.playfair.getKey().charAt((5 * i) + j)));
            }
        }
    }
    
    private void setAffineKeys() {
        if (this.affine.getB() != -1) {
            this.bTextField.setText(String.valueOf(this.affine.getB()));
        } else {
            this.bTextField.setText("");
        }
        if (this.affine.getM() != -1) {
            this.mTextField.setText(String.valueOf(this.affine.getM()));
        } else {
            this.mTextField.setText("");            
        }
    }

    public void validateViginereMatrix(){
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                if (!viginere.getValid()[i][j]) {
                    if (viginereMatrix[i][j].getText().length() == 0) {
                        viginereMatrix[i][j].setBackground(Color.RED);
                    } else {
                        viginereMatrix[i][j].setBackground(Color.WHITE);
                        viginereMatrix[i][j].setForeground(Color.RED);
                    }
                } else {
                    viginereMatrix[i][j].setBackground(Color.WHITE);
                    viginereMatrix[i][j].setForeground(Color.BLACK);
                }
            }
        }
    }

    public void validateEnigma(){
        for(int i=0; i<3; i++){
            for(int j=0; j<26; j++){
                if(!enigma.getValid()[i][j]){
                    if(rotorPermutation[i][j].getText().length()==0){
                        rotorPermutation[i][j].setBackground(Color.RED);
                    }else{
                        rotorPermutation[i][j].setBackground(Color.WHITE);
                        rotorPermutation[i][j].setForeground(Color.RED);
                    }
                }else{
                    rotorPermutation[i][j].setBackground(Color.WHITE);
                    rotorPermutation[i][j].setForeground(Color.BLACK);
                }
            }
        }
        for(int j=0; j<26; j++){
            if(!enigma.getValid()[3][j]){
                if(mirrorPermutation[j].getText().length()==0){
                    mirrorPermutation[j].setBackground(Color.RED);
                }else{
                    mirrorPermutation[j].setBackground(Color.WHITE);
                    mirrorPermutation[j].setForeground(Color.RED);
                }
            }else{
                mirrorPermutation[j].setBackground(Color.WHITE);
                mirrorPermutation[j].setForeground(Color.BLACK);
            }
        }
    }

    public void refreshEnigmaPopup(EnigmaPath path){
        int paddingLeft = 100;
        int paddingTop = 25;
        if(path.result.equals("")){
            for(int i=0; i<3; i++){
                for(int j=0; j<3; j++){
                    blueCable[i][j].setBounds(0,0,0,0);
                    greenCable[i][j].setBounds(0,0,0,0);
                }
                for(int j=0; j<26; j++){
                    rotorLabel[i][j].setText(String.valueOf((char)('A'+j)));
                }
            }
        }else{
            for(int i=0; i<3; i++){
                blueCable[i][0].setBounds(paddingLeft+50 + i*150,paddingTop+10 + 25*path.forward[i], 30, 5);
                blueCable[i][1].setBounds(paddingLeft+80 + i*150,
                        paddingTop+10 + 25*Math.min(path.forward[i], path.forward[i+1]),
                        5, 5 + 25*Math.abs(path.forward[i] - path.forward[i+1]));
                blueCable[i][2].setBounds(paddingLeft+85 + i*150,paddingTop+10 + 25*path.forward[i+1], 65, 5);

                greenCable[i][0].setBounds(paddingLeft+50 + i*150,paddingTop+10 + 25*path.backward[i], 65, 5);
                greenCable[i][1].setBounds(paddingLeft+115 + i*150,
                        paddingTop+10 + 25*Math.min(path.backward[i], path.backward[i+1]),
                        5, 5 + 25*Math.abs(path.backward[i] - path.backward[i+1]));
                greenCable[i][2].setBounds(paddingLeft+120 + i*150,paddingTop+10 + 25*path.backward[i+1], 30, 5);
                for(int j=0; j<26; j++){
                    rotorLabel[i][j].setText(String.valueOf((char)('A'+(j+26-path.offset[i])%26)));
                }
            }
        }
    }

    public boolean validateKey() {
        boolean ret = true;
        if(this.chosenAlgorithm.value().equalsIgnoreCase("extended viginere")) {
            ret = (this.key.getText().length() > 0);
        }else if(this.chosenAlgorithm.value().equalsIgnoreCase("viginere full")) {
            ret = (this.key.getText().length() > 0);
            for (int i = 0; i < this.key.getText().length(); i++) {
                char c = this.key.getText().charAt(i);
                ret = ret && ('A' <= c && c <= 'Z');
            }

        } else if (this.chosenAlgorithm.value().equalsIgnoreCase("enigma")){
            ret = (this.key.getText().length() == 3);
            for (int i = 0; i < this.key.getText().length(); i++) {
                char c = this.key.getText().charAt(i);
                ret = ret && ('A' <= c && c <= 'Z');
            }
        }
        if(ret){
            key.setBackground(Color.WHITE);
            key.setForeground(Color.BLACK);
        }else if(key.getText().length() == 0){
            key.setBackground(Color.red);
        }else{
            key.setForeground(Color.red);
            key.setBackground(Color.white);
        }

        return ret;
    }
}
