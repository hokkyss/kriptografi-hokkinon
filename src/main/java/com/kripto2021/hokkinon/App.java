/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kripto2021.hokkinon;

import com.kripto2021.hokkinon.enigma.Enigma;
import com.kripto2021.hokkinon.enigma.EnigmaPath;
import com.kripto2021.hokkinon.viginere.Viginere;
import utils.Utils;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author PERSONAL
 */
public class App extends javax.swing.JFrame {
    private File inputFile;
    private Scanner fileReader;
    /**
     * Creates new form App
     */
    public App() {
        initComponents();

        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Affine"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Playfair"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Viginere Full"));
        this.algorithmChoiceComboBox.addItem(new ComboBoxItem("Enigma"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadFile = new javax.swing.JFileChooser();
        algorithmChoiceComboBox = new javax.swing.JComboBox<>();
        cipherteksTextAreaContainer = new javax.swing.JScrollPane();
        cipherteksTextArea = new javax.swing.JTextArea();
        plainteksTextAreaContainer = new javax.swing.JScrollPane();
        plainteksTextArea = new javax.swing.JTextArea();
        key = new javax.swing.JTextField();
        plainteksLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        plainteksLabel1 = new javax.swing.JLabel();
        popUp = new javax.swing.JPanel();
        uploadPlainteksButton = new javax.swing.JButton();
        saveCipherteksButton = new javax.swing.JButton();
        savePlainteksButton = new javax.swing.JButton();
        uploadCipherteksButton = new javax.swing.JButton();

        uploadFile.setName("uploadFile"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hokkinon");
        setName("App"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        algorithmChoiceComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        algorithmChoiceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmChoiceComboBoxActionPerformed(evt);
            }
        });

        cipherteksTextArea.setEditable(false);
        cipherteksTextArea.setColumns(20);
        cipherteksTextArea.setRows(5);
        cipherteksTextAreaContainer.setViewportView(cipherteksTextArea);
        cipherteksTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangeCiphertext(e);
            }
        });

        plainteksTextArea.setColumns(20);
        plainteksTextArea.setRows(5);
        plainteksTextArea.setMargin(new java.awt.Insets(0, 0, 0, 0));
        plainteksTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangePlaintext(e);
            }
        });
        plainteksTextAreaContainer.setViewportView(plainteksTextArea);

        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        key.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                changedUpdate(e);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                onChangeKey(e);
            }
        });

        plainteksLabel.setText("plainteks:");

        keyLabel.setText("key:");

        plainteksLabel1.setText("cipherteks:");

        javax.swing.GroupLayout popUpLayout = new javax.swing.GroupLayout(popUp);
        popUp.setLayout(popUpLayout);
        popUpLayout.setHorizontalGroup(
            popUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        popUpLayout.setVerticalGroup(
            popUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );


        //Viginere Popup
        this.popUpViginere = new javax.swing.JPanel();
        this.popUpViginere.setBounds(0, 0, 700, 700);
        this.popUp.add(this.popUpViginere);

        javax.swing.GroupLayout popUpViginereLayout = new javax.swing.GroupLayout(popUpViginere);
        popUpViginere.setLayout(popUpViginereLayout);
        popUpViginereLayout.setHorizontalGroup(
                popUpViginereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        popUpViginereLayout.setVerticalGroup(
                popUpViginereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        this.viginere = new Viginere(26);
        this.viginereMatrix = new JTextField[26][26];
        for(int i=0; i<26; i++){
            for(int j=0; j<26; j++) {
                int iCopy = i, jCopy = j;
                this.viginereMatrix[i][j] = new JTextField(String.valueOf((char)('A' + (i+j)%26)));
                this.viginereMatrix[i][j].setBounds(25*(j+1), 25*(i+1), 25, 25);
                this.viginereMatrix[i][j].getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        viginere.setMatrix(iCopy, jCopy, viginereMatrix[iCopy][jCopy].getText());
                        validateViginereMatrix();
                    }
                });
                this.popUpViginere.add(this.viginereMatrix[i][j]);
            }
        }

        //Enigma Popup
        this.popUpEnigma = new javax.swing.JPanel();
        this.popUpEnigma.setBounds(0, 0, 700, 700);
        this.popUp.add(this.popUpEnigma);

        javax.swing.GroupLayout popUpEnigmaLayout = new javax.swing.GroupLayout(popUpEnigma);
        popUpEnigma.setLayout(popUpEnigmaLayout);
        popUpEnigmaLayout.setHorizontalGroup(
                popUpEnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );
        popUpEnigmaLayout.setVerticalGroup(
                popUpEnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 700, Short.MAX_VALUE)
        );


        enigma = new Enigma(3);
        rotorLabel = new JLabel[3][26];
        rotorPermutation = new JTextField[3][26];
        mirrorLabel = new JLabel[26];
        mirrorPermutation = new JTextField[26];
        blueCable = new JLabel[3][3];
        greenCable = new JLabel[3][3];
        int paddingLeft = 100;
        int paddingTop = 25;

        for(int i=0; i<3; i++){
            for(int j=0; j<26; j++){
                rotorLabel[i][j] = new JLabel();
                rotorLabel[i][j].setBounds(paddingLeft + 150*i, paddingTop + 25*j, 25, 25);
                rotorLabel[i][j].setText(String.valueOf((char)('A'+j)));
                popUpEnigma.add(rotorLabel[i][j]);
                rotorPermutation[i][j] = new JTextField();
                rotorPermutation[i][j].setBounds(paddingLeft + 25 + 150*i, paddingTop + 25*j, 25, 25);
                rotorPermutation[i][j].setText(String.valueOf(enigma.getRotor()[i][j]));
                int iCopy = i, jCopy = j;
                rotorPermutation[i][j].getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        enigma.setValue(iCopy, jCopy, rotorPermutation[iCopy][jCopy].getText());
                        validateEnigma();
                    }
                });
                popUpEnigma.add(rotorPermutation[i][j]);
            }
            for(int j=0; j<3; j++){
                blueCable[i][j] = new JLabel();
                blueCable[i][j].setBounds(0,0,0,0);
                blueCable[i][j].setOpaque(true);
                blueCable[i][j].setBackground(Color.BLUE);
                popUpEnigma.add(blueCable[i][j]);
                greenCable[i][j] = new JLabel();
                greenCable[i][j].setBounds(0,0,0,0);
                greenCable[i][j].setOpaque(true);
                greenCable[i][j].setBackground(Color.GREEN);
                popUpEnigma.add(greenCable[i][j]);
            }
        }
        for(int i=0; i<26; i++){
            mirrorLabel[i] = new JLabel();
            mirrorLabel[i].setBounds(paddingLeft + 450, paddingTop + 25*i, 25, 25);
            mirrorLabel[i].setText(String.valueOf((char)('A'+i)));
            popUpEnigma.add(mirrorLabel[i]);
            mirrorPermutation[i] = new JTextField();
            mirrorPermutation[i].setBounds(paddingLeft + 475, paddingTop + 25*i, 25, 25);
            mirrorPermutation[i].setText(String.valueOf(enigma.getMirror()[i]));
            int iCopy = i;
            mirrorPermutation[i].getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    changedUpdate(e);
                }
                @Override
                public void removeUpdate(DocumentEvent e) {
                    changedUpdate(e);
                }
                @Override
                public void changedUpdate(DocumentEvent e) {
                    enigma.setValue(3, iCopy, mirrorPermutation[iCopy].getText());
                    validateEnigma();
                }
            });
            popUpEnigma.add(mirrorPermutation[i]);
        }


        uploadPlainteksButton.setText("Upload");
        uploadPlainteksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPlainteksButtonActionPerformed(evt);
            }
        });

        saveCipherteksButton.setText("Save");

        savePlainteksButton.setText("Save");

        uploadCipherteksButton.setText("Upload");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(algorithmChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cipherteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(keyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(key))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(plainteksLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(uploadCipherteksButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveCipherteksButton))
                            .addComponent(plainteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plainteksLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uploadPlainteksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePlainteksButton)
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plainteksLabel)
                            .addComponent(uploadPlainteksButton)
                            .addComponent(savePlainteksButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plainteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(key)
                            .addComponent(keyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plainteksLabel1)
                            .addComponent(saveCipherteksButton)
                            .addComponent(uploadCipherteksButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cipherteksTextAreaContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(algorithmChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmChoiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmChoiceComboBoxActionPerformed
        String chosen = algorithmChoiceComboBox.getSelectedItem().toString();
        System.out.println(chosen + " chosen");
        popUpViginere.setVisible(chosen.equals("Viginere Full"));
        popUpEnigma.setVisible(chosen.equals("Enigma"));
    }//GEN-LAST:event_algorithmChoiceComboBoxActionPerformed

    private void uploadPlainteksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPlainteksButtonActionPerformed
        // TODO add your handling code here:
        try {
            this.inputFile = null;
            this.fileReader = null;
            
            this.uploadFile.showOpenDialog(this);
            this.inputFile = uploadFile.getSelectedFile();
            System.out.println(this.inputFile.getPath());
            System.out.println(this.inputFile.getAbsolutePath());
            System.out.println(this.inputFile.getParent());
            System.out.println(this.inputFile.getName());
            
            this.fileReader = new Scanner(this.inputFile);
        }
        catch (Exception e) {
            
        }
    }//GEN-LAST:event_uploadPlainteksButtonActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        System.out.println("Hello world!");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<ComboBoxItem> algorithmChoiceComboBox;
    private javax.swing.JTextArea cipherteksTextArea;
    private javax.swing.JScrollPane cipherteksTextAreaContainer;
    private javax.swing.JTextField key;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JLabel plainteksLabel;
    private javax.swing.JLabel plainteksLabel1;
    private javax.swing.JTextArea plainteksTextArea;
    private javax.swing.JScrollPane plainteksTextAreaContainer;
    private javax.swing.JPanel popUp;
    private javax.swing.JPanel popUpViginere;
    private javax.swing.JPanel popUpEnigma;
    private javax.swing.JButton saveCipherteksButton;
    private javax.swing.JButton savePlainteksButton;
    private javax.swing.JButton uploadCipherteksButton;
    private javax.swing.JFileChooser uploadFile;
    private javax.swing.JButton uploadPlainteksButton;
    // End of variables declaration//GEN-END:variables


    private javax.swing.JTextField[][] viginereMatrix;
    private Viginere viginere;

    private javax.swing.JLabel[][] rotorLabel;
    private javax.swing.JTextField[][] rotorPermutation;
    private javax.swing.JLabel[][] blueCable;
    private javax.swing.JLabel[][] greenCable;
    private javax.swing.JLabel[] mirrorLabel;
    private javax.swing.JTextField[] mirrorPermutation;
    private Enigma enigma;

    public void validateViginereMatrix(){
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                if (!viginere.getValid()[i][j]) {
                    if (viginereMatrix[i][j].getText().length() == 0) {
                        viginereMatrix[i][j].setBackground(Color.RED);
                    } else {
                        viginereMatrix[i][j].setBackground(Color.WHITE);
                        viginereMatrix[i][j].setForeground(Color.RED);
                    }
                } else {
                    viginereMatrix[i][j].setBackground(Color.WHITE);
                    viginereMatrix[i][j].setForeground(Color.BLACK);
                }
            }
        }
    }

    public void validateEnigma(){
        for(int i=0; i<3; i++){
            for(int j=0; j<26; j++){
                if(!enigma.getValid()[i][j]){
                    if(rotorPermutation[i][j].getText().length()==0){
                        rotorPermutation[i][j].setBackground(Color.RED);
                    }else{
                        rotorPermutation[i][j].setBackground(Color.WHITE);
                        rotorPermutation[i][j].setForeground(Color.RED);
                    }
                }else{
                    rotorPermutation[i][j].setBackground(Color.WHITE);
                    rotorPermutation[i][j].setForeground(Color.BLACK);
                }
            }
        }
        for(int j=0; j<26; j++){
            if(!enigma.getValid()[3][j]){
                if(mirrorPermutation[j].getText().length()==0){
                    mirrorPermutation[j].setBackground(Color.RED);
                }else{
                    mirrorPermutation[j].setBackground(Color.WHITE);
                    mirrorPermutation[j].setForeground(Color.RED);
                }
            }else{
                mirrorPermutation[j].setBackground(Color.WHITE);
                mirrorPermutation[j].setForeground(Color.BLACK);
            }
        }
    }

    public void refreshEnigmaPopup(EnigmaPath path){
        int paddingLeft = 100;
        int paddingTop = 25;
        if(path.result.equals("")){
            for(int i=0; i<3; i++){
                for(int j=0; j<3; j++){
                    blueCable[i][j].setBounds(0,0,0,0);
                    greenCable[i][j].setBounds(0,0,0,0);
                }
                for(int j=0; j<26; j++){
                    rotorLabel[i][j].setText(String.valueOf((char)('A'+j)));
                }
            }
        }else{
            for(int i=0; i<3; i++){
                blueCable[i][0].setBounds(paddingLeft+50 + i*150,paddingTop+10 + 25*path.forward[i], 30, 5);
                blueCable[i][1].setBounds(paddingLeft+80 + i*150,
                        paddingTop+10 + 25*Math.min(path.forward[i], path.forward[i+1]),
                        5, 5 + 25*Math.abs(path.forward[i] - path.forward[i+1]));
                blueCable[i][2].setBounds(paddingLeft+85 + i*150,paddingTop+10 + 25*path.forward[i+1], 65, 5);

                greenCable[i][0].setBounds(paddingLeft+50 + i*150,paddingTop+10 + 25*path.backward[i], 65, 5);
                greenCable[i][1].setBounds(paddingLeft+115 + i*150,
                        paddingTop+10 + 25*Math.min(path.backward[i], path.backward[i+1]),
                        5, 5 + 25*Math.abs(path.backward[i] - path.backward[i+1]));
                greenCable[i][2].setBounds(paddingLeft+120 + i*150,paddingTop+10 + 25*path.backward[i+1], 30, 5);
                for(int j=0; j<26; j++){
                    rotorLabel[i][j].setText(String.valueOf((char)('A'+(j+26-path.offset[i])%26)));
                }
            }
        }
    }

    public boolean validateKey() {
        String chosen = algorithmChoiceComboBox.getSelectedItem().toString();
        if(chosen.equals("Viginere Full")){
            boolean ret = (this.key.getText().length() > 0);
            for (int i = 0; i < this.key.getText().length(); i++) {
                char c = this.key.getText().charAt(i);
                ret = ret && ('A' <= c && c <= 'Z');
            }
            return ret;
        }else if(chosen.equals("Enigma")){
            boolean ret = (this.key.getText().length() == 3);
            for (int i = 0; i < this.key.getText().length(); i++) {
                char c = this.key.getText().charAt(i);
                ret = ret && ('A' <= c && c <= 'Z');
            }
            return ret;
        }

        return false;
    }

    private void onChangePlaintext(DocumentEvent e) {

    }

    private void onChangeCiphertext(DocumentEvent e) {

    }

    private void onChangeKey(DocumentEvent e) {

    }

    public void encrypt(){
        if(validateKey()){
            String chosen = algorithmChoiceComboBox.getSelectedItem().toString();
            if(chosen.equals("Viginere Full")){
                cipherteksTextArea.setText(viginere.encrypt(plainteksTextArea.getText(), key.getText(), false, true));
            }
            if(chosen.equals("Enigma")){
                EnigmaPath path = enigma.encrypt(plainteksTextArea.getText(), key.getText());
                cipherteksTextArea.setText(path.result);
                refreshEnigmaPopup(path);
            }

        }
    }
}
